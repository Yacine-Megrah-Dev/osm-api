version: '3.8'

services:
  api-gateway:
    build:
      context: .
      dockerfile: apps/osm-api-gateway/Dockerfile
    ports:
      - "3010:3010"  # Changed to avoid port conflict
    environment:
      - NODE_ENV=production
      - API_GATEWAY_HOST=0.0.0.0
      - API_GATEWAY_PORT=3010
      - USERS_HOST=users-app
      - USERS_PORT=3006
    depends_on:
      users-app:
        condition: service_healthy

  users-app:
    build:
      context: .
      dockerfile: apps/users-app/Dockerfile
    ports:
      - "3006:3006"  # Changed from 3005 to 3006
    environment:
      - NODE_ENV=development
      - USERS_HOST=0.0.0.0
      - USERS_PORT=3006
      - USERS_DB_HOST=postgres
      - USERS_DB_PORT=5432
      - USERS_DB_USERNAME=postgres
      - USERS_DB_PASSWORD=5599  # Matches USERS_DB_PASSWORD
      - USERS_DB_NAME=users_app_db  # Matches USERS_DB_NAME
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3006"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  postgres:
    image: postgres:16-alpine
    ports:
      - "5433:5432"  # Changed external port to 5433 to avoid conflict
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=5599  # Matches USERS_DB_PASSWORD
      - POSTGRES_DB=users_app_db  # Matches USERS_DB_NAME
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d users_app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["postgres", "-c", "listen_addresses=*"]

volumes:
  postgres_data: 